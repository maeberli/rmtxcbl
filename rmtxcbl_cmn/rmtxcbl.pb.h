// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rmtxcbl.proto

#ifndef PROTOBUF_rmtxcbl_2eproto__INCLUDED
#define PROTOBUF_rmtxcbl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace rmtxcbl {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rmtxcbl_2eproto();
void protobuf_AssignDesc_rmtxcbl_2eproto();
void protobuf_ShutdownFile_rmtxcbl_2eproto();

class Executable;
class Stream;

// ===================================================================

class Executable : public ::google::protobuf::Message {
 public:
  Executable();
  virtual ~Executable();
  
  Executable(const Executable& from);
  
  inline Executable& operator=(const Executable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Executable& default_instance();
  
  void Swap(Executable* other);
  
  // implements Message ----------------------------------------------
  
  Executable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Executable& from);
  void MergeFrom(const Executable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes exec = 1;
  inline bool has_exec() const;
  inline void clear_exec();
  static const int kExecFieldNumber = 1;
  inline const ::std::string& exec() const;
  inline void set_exec(const ::std::string& value);
  inline void set_exec(const char* value);
  inline void set_exec(const void* value, size_t size);
  inline ::std::string* mutable_exec();
  inline ::std::string* release_exec();
  
  // optional string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  
  // @@protoc_insertion_point(class_scope:rmtxcbl.Executable)
 private:
  inline void set_has_exec();
  inline void clear_has_exec();
  inline void set_has_label();
  inline void clear_has_label();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* exec_;
  ::std::string* label_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rmtxcbl_2eproto();
  friend void protobuf_AssignDesc_rmtxcbl_2eproto();
  friend void protobuf_ShutdownFile_rmtxcbl_2eproto();
  
  void InitAsDefaultInstance();
  static Executable* default_instance_;
};
// -------------------------------------------------------------------

class Stream : public ::google::protobuf::Message {
 public:
  Stream();
  virtual ~Stream();
  
  Stream(const Stream& from);
  
  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream& default_instance();
  
  void Swap(Stream* other);
  
  // implements Message ----------------------------------------------
  
  Stream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string out = 1;
  inline bool has_out() const;
  inline void clear_out();
  static const int kOutFieldNumber = 1;
  inline const ::std::string& out() const;
  inline void set_out(const ::std::string& value);
  inline void set_out(const char* value);
  inline void set_out(const char* value, size_t size);
  inline ::std::string* mutable_out();
  inline ::std::string* release_out();
  
  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  
  // @@protoc_insertion_point(class_scope:rmtxcbl.Stream)
 private:
  inline void set_has_out();
  inline void clear_has_out();
  inline void set_has_err();
  inline void clear_has_err();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* out_;
  ::std::string* err_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rmtxcbl_2eproto();
  friend void protobuf_AssignDesc_rmtxcbl_2eproto();
  friend void protobuf_ShutdownFile_rmtxcbl_2eproto();
  
  void InitAsDefaultInstance();
  static Stream* default_instance_;
};
// ===================================================================


// ===================================================================

// Executable

// required bytes exec = 1;
inline bool Executable::has_exec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Executable::set_has_exec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Executable::clear_has_exec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Executable::clear_exec() {
  if (exec_ != &::google::protobuf::internal::kEmptyString) {
    exec_->clear();
  }
  clear_has_exec();
}
inline const ::std::string& Executable::exec() const {
  return *exec_;
}
inline void Executable::set_exec(const ::std::string& value) {
  set_has_exec();
  if (exec_ == &::google::protobuf::internal::kEmptyString) {
    exec_ = new ::std::string;
  }
  exec_->assign(value);
}
inline void Executable::set_exec(const char* value) {
  set_has_exec();
  if (exec_ == &::google::protobuf::internal::kEmptyString) {
    exec_ = new ::std::string;
  }
  exec_->assign(value);
}
inline void Executable::set_exec(const void* value, size_t size) {
  set_has_exec();
  if (exec_ == &::google::protobuf::internal::kEmptyString) {
    exec_ = new ::std::string;
  }
  exec_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Executable::mutable_exec() {
  set_has_exec();
  if (exec_ == &::google::protobuf::internal::kEmptyString) {
    exec_ = new ::std::string;
  }
  return exec_;
}
inline ::std::string* Executable::release_exec() {
  clear_has_exec();
  if (exec_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exec_;
    exec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string label = 2;
inline bool Executable::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Executable::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Executable::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Executable::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Executable::label() const {
  return *label_;
}
inline void Executable::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Executable::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Executable::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Executable::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* Executable::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Stream

// optional string out = 1;
inline bool Stream::has_out() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream::set_has_out() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream::clear_has_out() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream::clear_out() {
  if (out_ != &::google::protobuf::internal::kEmptyString) {
    out_->clear();
  }
  clear_has_out();
}
inline const ::std::string& Stream::out() const {
  return *out_;
}
inline void Stream::set_out(const ::std::string& value) {
  set_has_out();
  if (out_ == &::google::protobuf::internal::kEmptyString) {
    out_ = new ::std::string;
  }
  out_->assign(value);
}
inline void Stream::set_out(const char* value) {
  set_has_out();
  if (out_ == &::google::protobuf::internal::kEmptyString) {
    out_ = new ::std::string;
  }
  out_->assign(value);
}
inline void Stream::set_out(const char* value, size_t size) {
  set_has_out();
  if (out_ == &::google::protobuf::internal::kEmptyString) {
    out_ = new ::std::string;
  }
  out_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::mutable_out() {
  set_has_out();
  if (out_ == &::google::protobuf::internal::kEmptyString) {
    out_ = new ::std::string;
  }
  return out_;
}
inline ::std::string* Stream::release_out() {
  clear_has_out();
  if (out_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = out_;
    out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string err = 2;
inline bool Stream::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stream::clear_err() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& Stream::err() const {
  return *err_;
}
inline void Stream::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::kEmptyString) {
    err_ = new ::std::string;
  }
  err_->assign(value);
}
inline void Stream::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::kEmptyString) {
    err_ = new ::std::string;
  }
  err_->assign(value);
}
inline void Stream::set_err(const char* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::kEmptyString) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Stream::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::kEmptyString) {
    err_ = new ::std::string;
  }
  return err_;
}
inline ::std::string* Stream::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rmtxcbl

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rmtxcbl_2eproto__INCLUDED
